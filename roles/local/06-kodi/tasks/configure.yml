---
- name: Create kodi config dir
  file:
    state: directory
    path: /home/{{ kodi_sysuser }}/.kodi/userdata/
    owner: "{{ kodi_sysuser }}"
    group: "{{ kodi_sysgroup }}"
  become: yes

- name: Drop Kodi sources.xml
  template:
    src: sources.xml.j2
    dest: /home/{{ kodi_sysuser }}/.kodi/userdata/sources.xml
    owner: "{{ kodi_sysuser }}"
    group: "{{ kodi_sysgroup }}"
  become: yes

- name: Drop avancedsettings.xml
  template:
    src: advancedsettings.2.xml.j2
    dest: /home/{{ kodi_sysuser }}/.kodi/userdata/advancedsettings.xml
    owner: "{{ kodi_sysuser }}"
    group: "{{ kodi_sysgroup }}"
  become: yes
  when: kodi_usemysql

- name: Drop guisettings.xml
  template:
    src: guisettings.xml.j2
    dest: /home/{{ kodi_sysuser }}/.kodi/userdata/guisettings.xml
    owner: "{{ kodi_sysuser }}"
    group: "{{ kodi_sysgroup }}"
  become: yes

- name: create kodi.service for the user session
  template:
    src: 'kodi.service.new.j2'
    dest: '/etc/systemd/system/kodi.service'
    mode: 0644
    owner: root
    group: root

#- name: start kodi.service
#  sudo: yes
#  service:
#    name: kodi.service
#    state: started
#    use: service
- name: enable service kodi
  systemd:
    name: kodi.service
    state: started
    enabled: yes
#    masked: no

- name: custom-actions
  template:
    src: 'custom-actions.j2'
    dest: '/etc/polkit-1/localauthority/50-local.d/custom-actions.pkla'
    mode: 0644
    owner: root
    group: root

- name: add string /etc/X11/Xwrapper.config
  lineinfile: dest=/etc/X11/Xwrapper.config regexp='^needs_root_rights' line='needs_root_rights=yes' create=yes

- name: add /etc/security/limits.conf
  lineinfile: dest=/etc/security/limits.conf regexp='^kodi' line='kodi             -       nice            -1' create=yes

# Fake display-manager.service to not make plymouth or something else complain.
- name: check the current symlink /etc/systemd/system/kodi.service
    stat: path=/etc/systemd/system/kodi.service 
    register: kodi_service__available

- name: remove the folder (only if it is a folder)
    file: path=/etc/systemd/system/kodi.service state=absent
    when: kodi_service__available.stat.isdir is defined and kodi_service__available.stat.isdir

- name: /home/kodi/.config/openbox check directory exists example.
    stat:
      path: /home/kodi/.config/openbox
    register: files_to_delete

- debug:
    msg: "It is a directory"
    when: files_to_delete.stat.exists and files_to_delete.stat.isdir

- name: autostart
  template:
    src: 'autostart.j2'
    dest: '/home/kodi/.config/openbox/autostart'
    mode: 0777
    owner: kodi
    group: koid
  notify: restart kodi
