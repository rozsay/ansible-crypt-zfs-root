---

# tasks file for 01-system-prep
#- debug:
#    msg: System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}
#- debug:
#    msg: System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}
#- debug:
#    msg: "DISK {{ _root_disks }} "
#    msg: "1 {{ _root_disks_by_id }} {{ _data_disks_by_id  }}"
#_target_disks: "{{ _legacy_device_nodes | ternary(((_root_disks + _data_disks) | map('regex_replace', '(.*)', '/dev/\\g<1>') | list),(_root_disks_by_id + _data_disks_by_id)) }}"
#_data_disks: []
#_target_disks: "{{ _legacy_device_nodes | ternary(((_root_disks + _data_disks) | map('regex_replace', '(.*)', '/dev/\\g<1>') | list),(_root_disks_by_id + _data_disks_by_id)) }}"
#- debug:
#    msg: "DISK target {{ _target_disks }} "
#    msg: "{{ _root_disks | map('extract', hostvars[inventory_hostname]['ansible_devices'], ['links', 'ids', 0]) | list | map('regex_replace', '(.*)', '/dev/disk/by-id/\\g<1>') | list }}"
#     msg: "{{ _root_disks | map('extract', hostvars[inventory_hostname]['ansible_devices'], ['links', 'ids', 0]) | list | list }}"

#- name: check ZFS pool existance
#  command: zpool list -Ho name {{ _root_pool }}
#  register: result_pool_list
#  ignore_errors: yes
#  changed_when: false

#- name: check ZFS data pool existance
#  command: zpool list -Ho name {{ _data_pool }}
#  register: result_datapool_list
#  ignore_errors: yes
#  changed_when: false
#- name: destroy ZFS pool#command: zpool destroy {{ zfs_pool_name }}#when:#- zfs_pool_state | default('present') == 'absent'#- result_pool_list.rc == 0
- name: set up root zfs crypt devices
  shell: "echo -n {{ _crypt_passphrase }} | zpool create {{ _crypt_flags | join(' ') }} {{ _root_pool_opts | join(' ') }} {{ _root_pool }} {{ _root_pool_type }} {{ _root_device_list }}{{ _root_part_append }} -f"
  when:
#    - _crypt | default(false) | bool == true
    - _lukscrypt | default(false) | bool != true
#    - zfs_pool_state | default('present') == 'present'
#    - result_pool_list.rc == 1


- name: set up root zfs luks crypt devices
  shell: "zpool create {{ _lukscrypt_flags | join(' ') }} {{ _root_pool_opts | join(' ') }} {{ _root_pool }} {{ _root_pool_type }} {{ _root_device_list }}{{ _root_part_append }} -f"
  when: _lukscrypt | default(false) | bool == true

- name: set up root zfs devices
  shell: "zpool create {{ _root_pool_opts | join(' ') }} {{ _root_pool }} {{ _root_pool_type }} {{ _root_device_list }}{{ _root_part_append }} -f"
  when:
    - _crypt | default(false) | bool != true
#    - zfs_pool_state | default('present') == 'present'
#    - result_pool_list.rc == 1

- name: create root dataset
  zfs:
    name: "{{ _root_pool }}/root"
    state: present
    extra_zfs_properties:
      canmount: noauto
      mountpoint: /
#      canmount: off
#      mountpoint: none
#  when:
#    - zfs_pool_state | default('present') == 'absent'
#    - result_pool_list.rc == 0

- name: manually mount rpool/root before creating other mountpoints
  shell: "zfs mount {{ _root_pool }}/root"

#- name: create mountpoints in root pool
#  zfs:
#    name: "{{ item.name }}"
#    state: present
#    extra_zfs_properties:
#      "{{ item.properties }}"
#  with_items:
#    - "{{ _root_volumes }}"
#- name: chmod 01777 /mnt/var/tmp
#  file:
#    path: /mnt/var/tmp
#    mode: 01777

#- name: set up zfs data devices
#  shell: "zpool create {{ _data_pool_opts | join(' ') }} {{ _data_pool }} {{ _data_pool_type }} {{ _data_device_list }}{{ _data_part_append }} -f"
#  shell: "zpool create {{ _data_pool_opts | join(' ') }} {{ _data_pool }} {{ _data_pool_type }} {{ map('regex_replace', '(.*)', '/dev/mapper/\\g<1>') | list, (_data_partitions | ternary((_data_device_list | map('regex_replace', '(.*)',>
#  when:
#    - _data_disks | default(false) | bool == true
#    - zfs_datapool_state | default('present') == 'present'
#    - result_datapool_list.rc == 1
#- name: create data dataset
#  zfs:
#    name: "{{ _data_pool }}/data"
#    state: present
#    extra_zfs_properties:
#      mountpoint: /data
#  when:
#    -  - _data_disks | default(false) | bool == true
#- debug: msg: Partition list "{{  _root_device_list }}"
