---
# tasks file for 01-system-prep
#- debug:
#    msg: System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}
#- debug:
#    msg: System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}
#- debug:
#    msg: "DISK {{ _root_disks }} "
#    msg: "1 {{ _root_disks_by_id }} {{ _data_disks_by_id  }}"
#_target_disks: "{{ _legacy_device_nodes | ternary(((_root_disks + _data_disks) | map('regex_replace', '(.*)', '/dev/\\g<1>') | list),(_root_disks_by_id + _data_disks_by_id)) }}"
#_data_disks: []
#_target_disks: "{{ _legacy_device_nodes | ternary(((_root_disks + _data_disks) | map('regex_replace', '(.*)', '/dev/\\g<1>') | list),(_root_disks_by_id + _data_disks_by_id)) }}"
#- debug:
#    msg: "DISK target {{ _target_disks }} "
#    msg: "{{ _root_disks | map('extract', hostvars[inventory_hostname]['ansible_devices'], ['links', 'ids', 0]) | list | map('regex_replace', '(.*)', '/dev/disk/by-id/\\g<1>') | list }}"
#     msg: "{{ _root_disks | map('extract', hostvars[inventory_hostname]['ansible_devices'], ['links', 'ids', 0]) | list | list }}"
- name: ensure live system has necessary packages installed
  apt:
    name: 
      - mdadm
      - debootstrap
    state: present
    update_cache: true
    cache_valid_time: 3600
#    upgrade: safe
#    update_cache: true
  become: true
  register: apt_out
- debug: var=apt_out
#- debug: var={{ apt_out.stdout.split('\n')[:-1] }}
#  with_items: 
#    - mdadm
#    - debootstrap
#    - gdisk
#    - zfs-initramfs
#    - dkms
#    - dpkg-dev
#    - zfs-dkms
#    - zfsutils-linux
- name: Necessary efi
  apt:
    name:
    state: present
  with_items: 
    - dosfstools
  when: _crypt | default(false) | bool == true
- name: forcibly zap disks
  shell: "sgdisk --zap-all {{ item }}"
  with_items:
    - "{{ _root_disks_by_id }}"
- name: set up efi disk partitions
  shell: "sgdisk {{ _efi_partition_flags }} {{ item }}"
  with_items:
    - "{{ _root_device_list }}"
- name: set up boot disk partitions
  shell: "sgdisk {{ _boot_partition_flags }} {{ item }}"
  with_items:
    - "{{ _root_device_list }}"
- name: set up root disk partitions
  shell: "sgdisk {{ _root_partition_flags }} {{ item }}"
  with_items:
    - "{{ _root_device_list }}"
- name: print info disk
  shell: "sgdisk --print {{ item }}"
  register: r
  with_items:
    - "{{ _root_disks_by_id }}"
- name: debug directory output
  debug:
    msg: "{{r.results|map(attribute='stdout_lines')|list}}"

#- name: check ZFS pool existance
#  command: zpool list -Ho name {{ _root_pool }}
#  register: result_pool_list
#  ignore_errors: yes
#  changed_when: false
  
#- name: check ZFS data pool existance
#  command: zpool list -Ho name {{ _data_pool }}
#  register: result_datapool_list
#  ignore_errors: yes
#  changed_when: false
#- name: destroy ZFS pool#command: zpool destroy {{ zfs_pool_name }}#when:#- zfs_pool_state | default('present') == 'absent'#- result_pool_list.rc == 0
- name: set up root zfs crypt devices
  shell: "echo -n {{ _crypt_passphrase }} | zpool create {{ _crypt_flags | join(' ') }} {{ _root_pool_opts | join(' ') }} {{ _root_pool }} {{ _root_pool_type }} {{ _root_device_list }}{{ _root_part_append }} -f"
  when:
    - _crypt | default(false) | bool == true
#    - zfs_pool_state | default('present') == 'present'
#    - result_pool_list.rc == 1  

- name: set up root zfs devices
  shell: "zpool create {{ _root_pool_opts | join(' ') }} {{ _root_pool }} {{ _root_pool_type }} {{ _root_device_list }}{{ _root_part_append }} -f"
  when:
    - _crypt | default(false) | bool != true
#    - zfs_pool_state | default('present') == 'present'
#    - result_pool_list.rc == 1  

- name: create root dataset
  zfs:
    name: "{{ _root_pool }}/root"
    state: present
    extra_zfs_properties:
      canmount: noauto
      mountpoint: /
#      canmount: off
#      mountpoint: none
#  when:
#    - zfs_pool_state | default('present') == 'absent'
#    - result_pool_list.rc == 0

- name: manually mount rpool/root before creating other mountpoints
  shell: "zfs mount {{ _root_pool }}/root"
  
#- name: create mountpoints in root pool
#  zfs:
#    name: "{{ item.name }}"
#    state: present
#    extra_zfs_properties:
#      "{{ item.properties }}"
#  with_items:
#    - "{{ _root_volumes }}"
#- name: chmod 01777 /mnt/var/tmp
#  file:
#    path: /mnt/var/tmp
#    mode: 01777

#- name: set up zfs data devices
#  shell: "zpool create {{ _data_pool_opts | join(' ') }} {{ _data_pool }} {{ _data_pool_type }} {{ _data_device_list }}{{ _data_part_append }} -f"
#  shell: "zpool create {{ _data_pool_opts | join(' ') }} {{ _data_pool }} {{ _data_pool_type }} {{ map('regex_replace', '(.*)', '/dev/mapper/\\g<1>') | list, (_data_partitions | ternary((_data_device_list | map('regex_replace', '(.*)', '\\g<1>' + _data_part_append) | list), _data_device_list)) | join(' ') }}"
#  when: 
#    - _data_disks | default(false) | bool == true
#    - zfs_datapool_state | default('present') == 'present'
#    - result_datapool_list.rc == 1  
#- name: create data dataset
#  zfs:
#    name: "{{ _data_pool }}/data"
#    state: present
#    extra_zfs_properties:
#      mountpoint: /data
#  when:
#    -  - _data_disks | default(false) | bool == true
#- debug: msg: Partition list "{{  _root_device_list }}"
- name: format and mount {{ _installdir }}boot
  shell: "mke2fs -t ext2 {{ item }} && mkdir {{ _installdir }}boot && mount {{ item }} {{ _installdir }}boot"
  with_items:
#    - "{{ (_root_device_list | length > 1) | (_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + _boot_part_append) | list).0 }}"
    - "{{ _root_device_list }}{{ _boot_part_append }}"
  
- name: format and mount {{ _installdir }}boot/efi
  shell: "mkfs.msdos -F 32 -n EFI {{ item }} && mkdir {{ _installdir }}boot/efi && mount {{ item }} {{ _installdir }}boot/efi"
  with_items:
#    - "{{ (_root_device_list | length > 1) | (_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + _efi_part_append) | list).0 }}"
    -  - "{{ _root_device_list }}{{ _efi_part_append }}"
  when: _efi | default(false) | bool == true
  
#- name: create efi mountpoint
#  file:
#    path: {{ _installdir }}/boot/efi
#    state: directory
#  when: _efi|default(false)|bool == true
  
- name: run debootstrap and set devices=off for root pool
  shell: "debootstrap {{ _ubuntu_release }} {{ _installdir }} && zfs set devices=off {{ _root_pool }}"

#- name: set devices=off for data pool
#  shell: "zfs set devices=off {{ _data_pool }}"

- name: write /etc/hostname in chroot
  copy:
    content: "{{ _hostname.short }}"
    dest: "{{ _installdir }}etc/hostname"
- name: write {{ _installdir }}apt/sources.list in chroot
  template:
    src: etc/apt/sources.j2
    dest: "{{ _installdir }}etc/apt/sources.list"
- name: add hostname entries to {{ _installdir }}hosts in chroot
  lineinfile:
    line: "127.0.0.1 {{ _hostname.short }} {{ _hostname.long }}"
    path: "{{ _installdir }}etc/hosts"
    state: present
    insertbefore: BOF
- name: mount special filesystems for chroot
  shell: "mount --rbind {{ item }}"
  with_items:
    - /dev "{{ _installdir }}dev"
    - /proc "{{ _installdir }}proc"
    - /sys "{{ _installdir }}sys"
  args:
    warn: false
